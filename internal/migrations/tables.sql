CREATE TABLE IF NOT EXISTS User (
    ID INTEGER PRIMARY KEY AUTOINCREMENT,
    Username TEXT NOT NULL,
    Email TEXT NOT NULL UNIQUE,
    Password TEXT NOT NULL
);

CREATE TABLE IF NOT EXISTS Posts (
    ID INTEGER PRIMARY KEY AUTOINCREMENT,
    AuthorID INTEGER NOT NULL,
    Title TEXT NOT NULL,
    Text TEXT NOT NULL,
    LikeCount INTEGER DEFAULT 0,
    DislikeCount INTEGER DEFAULT 0,
    CreationTime TIMESTAMP NOT NULL,
    FOREIGN KEY (AuthorID) REFERENCES User(ID)
);

CREATE TABLE IF NOT EXISTS Comment (
    ID INTEGER PRIMARY KEY AUTOINCREMENT,
    Text TEXT NOT NULL,
    PostID INTEGER NOT NULL,
    AuthorID INTEGER NOT NULL,
    LikeCount INTEGER DEFAULT 0,
    DislikeCount INTEGER DEFAULT 0,
    Username TEXT NOT NULL,
    FOREIGN KEY (PostID) REFERENCES Posts(ID),
    FOREIGN KEY (AuthorID) REFERENCES User(ID)
);

CREATE TABLE IF NOT EXISTS Category (
    ID INTEGER PRIMARY KEY AUTOINCREMENT,
    Name TEXT NOT NULL
);

INSERT INTO Category(ID, Name)
VALUES (1,'Golang'),
       (2,'SQL'),
       (3,'Docker'),
       (4,'HTML'),
       (5,'Other');


CREATE TABLE IF NOT EXISTS PostCategory (
    PostID INTEGER,
    CategoryID INTEGER,
    FOREIGN KEY (PostID) REFERENCES Posts(ID),
    FOREIGN KEY (CategoryID) REFERENCES Category(ID),
    PRIMARY KEY (PostID, CategoryID)
);

CREATE TABLE IF NOT EXISTS Session (
    ID INTEGER PRIMARY KEY AUTOINCREMENT,
    Token TEXT NOT NULL,
    ExpTime TIMESTAMP NOT NULL,
    UserID INTEGER NOT NULL,
    FOREIGN KEY (UserID) REFERENCES User(ID)
);

CREATE TABLE IF NOT EXISTS Reaction (
    ID INTEGER PRIMARY KEY AUTOINCREMENT,
    UserID INTEGER NOT NULL,
    PostID INTEGER,
    CommentID INTEGER,
    Vote INTEGER CHECK(Vote IN (-1, 1)),
    FOREIGN KEY (UserID) REFERENCES User(ID),
    FOREIGN KEY (PostID) REFERENCES Posts(ID),
    FOREIGN KEY (CommentID) REFERENCES Comment(ID)
);
